#!/bin/bash
# Copyright 2019 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SCRIPT=$(basename "$0")
while test $# -gt 0; do
        case "$1" in
          -h|--help)
            echo "$SCRIPT - sources env vars for clusterctl init from an OpenStack clouds.yaml file"
            echo " "
            echo "source $SCRIPT [options] <path/to/clouds.yaml> <cloud>"
            echo " "
            echo "options:"
            echo "-h, --help                show brief help"
            exit 0
            ;;
          *)
            break
            ;;
        esac
done

# Check if clouds.yaml file provided
if [[ -n "${1-}" ]] && [[ $1 != -* ]] && [[ $1 != --* ]];then
  CLOUDS_PATH="$1"
else
  echo "Error: No clouds.yaml provided"
  echo "You must provide a valid clouds.yaml script to generate a cloud.conf"
  echo ""
  exit 1
fi

# Check if os cloud is provided
if [[ -n "${2-}" ]] && [[ $2 != -* ]] && [[ $2 != --* ]]; then
  export CLOUD=$2
else
  echo "Error: No cloud specified"
  echo "You must specify which cloud you want to use."
  echo ""
  exit 1
fi

yq_type=$(file "$(which yq)")
if [[ ${yq_type} == *"Python script"* ]]; then
  echo "Wrong version of 'yq' installed, please install the one from https://github.com/mikefarah/yq"
  echo ""
  exit 1
fi

CLOUDS_PATH=${CLOUDS_PATH:-""}
OPENSTACK_CLOUD_YAML_CONTENT=$(cat "$CLOUDS_PATH")

# Just blindly parse the cloud.yaml here, overwriting old vars.
AUTH_URL=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.auth_url)
USERNAME=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.username)
PASSWORD=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.password)
REGION=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.region_name)
PROJECT_ID=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.project_id)
PROJECT_NAME=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.project_name)
DOMAIN_NAME=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.user_domain_name)
if [[ "$DOMAIN_NAME" = "null" ]]; then
  DOMAIN_NAME=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.domain_name)
fi
DOMAIN_ID=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.user_domain_id)
if [[ "$DOMAIN_ID" = "null" ]]; then
  DOMAIN_ID=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.auth.domain_id)
fi
CACERT_ORIGINAL=$(echo "$OPENSTACK_CLOUD_YAML_CONTENT" | yq r - clouds.${CLOUD}.cacert)

# Build OPENSTACK_CLOUD_YAML_B64
OPENSTACK_CLOUD_YAML_SELECTED_CLOUD_B64=$(echo "${OPENSTACK_CLOUD_YAML_CONTENT}" | yq r - clouds.${CLOUD} | yq p - clouds.${CLOUD} | base64 --wrap=0)
export OPENSTACK_CLOUD_YAML_B64="${OPENSTACK_CLOUD_YAML_SELECTED_CLOUD_B64}"

# Build OPENSTACK_CLOUD_PROVIDER_CONF_B64
# Basic cloud.conf, no LB configuration as that data is not known yet.
cloud_provider_conf_tmp=$(mktemp /tmp/cloud.confXXX)
OPENSTACK_CLOUD_PROVIDER_CONF=""
cat >> ${cloud_provider_conf_tmp} << EOF
[Global]
auth-url=$AUTH_URL
username="$USERNAME"
password="$PASSWORD"
EOF

if [[ "$PROJECT_ID" != "null" ]]; then
  echo "tenant-id=\"${PROJECT_ID}\"" >> ${cloud_provider_conf_tmp}
fi
if [[ "$PROJECT_NAME" != "null" ]]; then
  echo "tenant-name=\"${PROJECT_NAME}\"" >> ${cloud_provider_conf_tmp}
fi
if [[ "$DOMAIN_NAME" != "null" ]]; then
  echo "domain-name=\"${DOMAIN_NAME}\"" >> ${cloud_provider_conf_tmp}
fi
if [[ "$DOMAIN_ID" != "null" ]]; then
  echo "domain-id=\"${DOMAIN_ID}\"" >> ${cloud_provider_conf_tmp}
fi

if [[ "$CACERT_ORIGINAL" != "null" ]]; then
  echo "ca-file=\"${CACERT_ORIGINAL}\"" >> ${cloud_provider_conf_tmp}
fi
if [[ "$REGION" != "null" ]]; then
  echo "region=\"${REGION}\"" >> ${cloud_provider_conf_tmp}
fi
export OPENSTACK_CLOUD_PROVIDER_CONF_B64="$(cat ${cloud_provider_conf_tmp} | base64 --wrap=0)"

# Build OPENSTACK_CLOUD_CACERT_B64
OPENSTACK_CLOUD_CACERT=""
if [[ "$CACERT_ORIGINAL" != "null" ]]; then
  OPENSTACK_CLOUD_CACERT=$(cat "$CACERT_ORIGINAL")
fi
export OPENSTACK_CLOUD_CACERT_B64="$(echo ${OPENSTACK_CLOUD_CACERT} | base64 --wrap=0)"
