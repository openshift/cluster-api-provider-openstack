/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha6

import (
	apiv1alpha6 "sigs.k8s.io/cluster-api-provider-openstack/api/v1alpha6"
)

// InstanceApplyConfiguration represents an declarative configuration of the Instance type for use
// with apply.
type InstanceApplyConfiguration struct {
	ID             *string                       `json:"id,omitempty"`
	Name           *string                       `json:"name,omitempty"`
	Trunk          *bool                         `json:"trunk,omitempty"`
	FailureDomain  *string                       `json:"failureDomain,omitempty"`
	SecurityGroups []string                      `json:"securigyGroups,omitempty"`
	Networks       []NetworkApplyConfiguration   `json:"networks,omitempty"`
	Subnet         *string                       `json:"subnet,omitempty"`
	Tags           []string                      `json:"tags,omitempty"`
	Image          *string                       `json:"image,omitempty"`
	ImageUUID      *string                       `json:"imageUUID,omitempty"`
	Flavor         *string                       `json:"flavor,omitempty"`
	SSHKeyName     *string                       `json:"sshKeyName,omitempty"`
	UserData       *string                       `json:"userData,omitempty"`
	Metadata       map[string]string             `json:"metadata,omitempty"`
	ConfigDrive    *bool                         `json:"configDrive,omitempty"`
	RootVolume     *RootVolumeApplyConfiguration `json:"rootVolume,omitempty"`
	ServerGroupID  *string                       `json:"serverGroupID,omitempty"`
	State          *apiv1alpha6.InstanceState    `json:"state,omitempty"`
	IP             *string                       `json:"ip,omitempty"`
	FloatingIP     *string                       `json:"floatingIP,omitempty"`
}

// InstanceApplyConfiguration constructs an declarative configuration of the Instance type for use with
// apply.
func Instance() *InstanceApplyConfiguration {
	return &InstanceApplyConfiguration{}
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithID(value string) *InstanceApplyConfiguration {
	b.ID = &value
	return b
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithName(value string) *InstanceApplyConfiguration {
	b.Name = &value
	return b
}

// WithTrunk sets the Trunk field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Trunk field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithTrunk(value bool) *InstanceApplyConfiguration {
	b.Trunk = &value
	return b
}

// WithFailureDomain sets the FailureDomain field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FailureDomain field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithFailureDomain(value string) *InstanceApplyConfiguration {
	b.FailureDomain = &value
	return b
}

// WithSecurityGroups adds the given value to the SecurityGroups field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the SecurityGroups field.
func (b *InstanceApplyConfiguration) WithSecurityGroups(values ...string) *InstanceApplyConfiguration {
	for i := range values {
		b.SecurityGroups = append(b.SecurityGroups, values[i])
	}
	return b
}

// WithNetworks adds the given value to the Networks field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Networks field.
func (b *InstanceApplyConfiguration) WithNetworks(values ...*NetworkApplyConfiguration) *InstanceApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithNetworks")
		}
		b.Networks = append(b.Networks, *values[i])
	}
	return b
}

// WithSubnet sets the Subnet field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Subnet field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithSubnet(value string) *InstanceApplyConfiguration {
	b.Subnet = &value
	return b
}

// WithTags adds the given value to the Tags field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Tags field.
func (b *InstanceApplyConfiguration) WithTags(values ...string) *InstanceApplyConfiguration {
	for i := range values {
		b.Tags = append(b.Tags, values[i])
	}
	return b
}

// WithImage sets the Image field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Image field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithImage(value string) *InstanceApplyConfiguration {
	b.Image = &value
	return b
}

// WithImageUUID sets the ImageUUID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ImageUUID field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithImageUUID(value string) *InstanceApplyConfiguration {
	b.ImageUUID = &value
	return b
}

// WithFlavor sets the Flavor field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Flavor field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithFlavor(value string) *InstanceApplyConfiguration {
	b.Flavor = &value
	return b
}

// WithSSHKeyName sets the SSHKeyName field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the SSHKeyName field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithSSHKeyName(value string) *InstanceApplyConfiguration {
	b.SSHKeyName = &value
	return b
}

// WithUserData sets the UserData field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the UserData field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithUserData(value string) *InstanceApplyConfiguration {
	b.UserData = &value
	return b
}

// WithMetadata puts the entries into the Metadata field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, the entries provided by each call will be put on the Metadata field,
// overwriting an existing map entries in Metadata field with the same key.
func (b *InstanceApplyConfiguration) WithMetadata(entries map[string]string) *InstanceApplyConfiguration {
	if b.Metadata == nil && len(entries) > 0 {
		b.Metadata = make(map[string]string, len(entries))
	}
	for k, v := range entries {
		b.Metadata[k] = v
	}
	return b
}

// WithConfigDrive sets the ConfigDrive field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ConfigDrive field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithConfigDrive(value bool) *InstanceApplyConfiguration {
	b.ConfigDrive = &value
	return b
}

// WithRootVolume sets the RootVolume field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the RootVolume field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithRootVolume(value *RootVolumeApplyConfiguration) *InstanceApplyConfiguration {
	b.RootVolume = value
	return b
}

// WithServerGroupID sets the ServerGroupID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ServerGroupID field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithServerGroupID(value string) *InstanceApplyConfiguration {
	b.ServerGroupID = &value
	return b
}

// WithState sets the State field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the State field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithState(value apiv1alpha6.InstanceState) *InstanceApplyConfiguration {
	b.State = &value
	return b
}

// WithIP sets the IP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the IP field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithIP(value string) *InstanceApplyConfiguration {
	b.IP = &value
	return b
}

// WithFloatingIP sets the FloatingIP field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the FloatingIP field is set to the value of the last call.
func (b *InstanceApplyConfiguration) WithFloatingIP(value string) *InstanceApplyConfiguration {
	b.FloatingIP = &value
	return b
}
