/*
Copyright 2024 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by applyconfiguration-gen. DO NOT EDIT.

package v1alpha7

// SecurityGroupApplyConfiguration represents an declarative configuration of the SecurityGroup type for use
// with apply.
type SecurityGroupApplyConfiguration struct {
	Name  *string                               `json:"name,omitempty"`
	ID    *string                               `json:"id,omitempty"`
	Rules []SecurityGroupRuleApplyConfiguration `json:"rules,omitempty"`
}

// SecurityGroupApplyConfiguration constructs an declarative configuration of the SecurityGroup type for use with
// apply.
func SecurityGroup() *SecurityGroupApplyConfiguration {
	return &SecurityGroupApplyConfiguration{}
}

// WithName sets the Name field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the Name field is set to the value of the last call.
func (b *SecurityGroupApplyConfiguration) WithName(value string) *SecurityGroupApplyConfiguration {
	b.Name = &value
	return b
}

// WithID sets the ID field in the declarative configuration to the given value
// and returns the receiver, so that objects can be built by chaining "With" function invocations.
// If called multiple times, the ID field is set to the value of the last call.
func (b *SecurityGroupApplyConfiguration) WithID(value string) *SecurityGroupApplyConfiguration {
	b.ID = &value
	return b
}

// WithRules adds the given value to the Rules field in the declarative configuration
// and returns the receiver, so that objects can be build by chaining "With" function invocations.
// If called multiple times, values provided by each call will be appended to the Rules field.
func (b *SecurityGroupApplyConfiguration) WithRules(values ...*SecurityGroupRuleApplyConfiguration) *SecurityGroupApplyConfiguration {
	for i := range values {
		if values[i] == nil {
			panic("nil value passed to WithRules")
		}
		b.Rules = append(b.Rules, *values[i])
	}
	return b
}
